sebastian@sebastian-XPS-15-9500:~/Schreibtisch/sypr-uebungen/aufgabe2$ javac Bubblesort.java
sebastian@sebastian-XPS-15-9500:~/Schreibtisch/sypr-uebungen/aufgabe2$ java Bubblesort 10
Bitte 10 ganze Zahlen eingeben: t
-1074509597
-2086829163
502198494
1822756626
387189985
14734353
634565533
-296948485
691375681
158532890
Sortierte Zahlenfolge: 
-2086829163
-1074509597
-296948485
14734353
158532890
387189985
502198494
634565533
691375681
1822756626
sebastian@sebastian-XPS-15-9500:~/Schreibtisch/sypr-uebungen/aufgabe2$ make bubblesort
gcc -g -W -Wall -Wvla -std=c11 -pedantic    bubblesort.c   -o bubblesort
sebastian@sebastian-XPS-15-9500:~/Schreibtisch/sypr-uebungen/aufgabe2$ ./bubblesort 10
Bitte 10 ganze Zahlen eingeben: 
k
1992628002
495620044
1733963236
1647980083
2020738501
68501527
621458134
392680256
977188520
963120735

Sortierte Zahlenfolge: 
68501527
392680256
495620044
621458134
963120735
977188520
1647980083
1733963236
1992628002
2020738501
sebastian@sebastian-XPS-15-9500:~/Schreibtisch/sypr-uebungen/aufgabe2$ valgrind ./bubblesort 10
==5704== Memcheck, a memory error detector
==5704== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==5704== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==5704== Command: ./bubblesort 10
==5704== 
Bitte 10 ganze Zahlen eingeben: 
k
1721943850
913910083
1817974830
1217683046
2039429788
1811555216
1508464775
227709019
78705807
1537681547

Sortierte Zahlenfolge: 
78705807
227709019
913910083
1217683046
1508464775
1537681547
1721943850
1811555216
1817974830
2039429788
==5704== 
==5704== HEAP SUMMARY:
==5704==     in use at exit: 0 bytes in 0 blocks
==5704==   total heap usage: 3 allocs, 3 frees, 2,088 bytes allocated
==5704== 
==5704== All heap blocks were freed -- no leaks are possible
==5704== 
==5704== For lists of detected and suppressed errors, rerun with: -s
==5704== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
sebastian@sebastian-XPS-15-9500:~/Schreibtisch/sypr-uebungen/aufgabe2$ make cppcheck
cppcheck --enable=warning,style --std=c11 bubblesort.c
Checking bubblesort.c ...
sebastian@sebastian-XPS-15-9500:~/Schreibtisch/sypr-uebungen/aufgabe2$ ./bubblesort 1000 < /dev/null | tail -1000 > out.txt
sebastian@sebastian-XPS-15-9500:~/Schreibtisch/sypr-uebungen/aufgabe2$ sort -n out.txt | diff - out.txt
sebastian@sebastian-XPS-15-9500:~/Schreibtisch/sypr-uebungen/aufgabe2$ 

|||||||||||||||||||||||||||||||||||||||||||||||||||||||| Benchmarks: ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
java Bubblesort 1000:
	real	0m0.100s
	user	0m0.133s
	sys	0m0.027s

./bubblesort 1000:
	real	0m0.007s
	user	0m0.007s
	sys	0m0.000s

java Bubblesort 10000:
	real	0m0.336s
	user	0m0.439s
	sys	0m0.029s

./bubblesort 10000:
	real	0m0.245s
	user	0m0.241s
	sys	0m0.004s

java Bubblesort 100000:
	real	0m14.628s
	user	0m14.812s
	sys	0m0.069s

./bubblesort 100000:
	real	0m24.157s
	user	0m24.154s
	sys	0m0.000s

|||||||||| OPTIMIZATION -O2 |||||||||||
./bubblesort 1000:
	real	0m0.006s
	user	0m0.003s
	sys	0m0.003s

./bubblesort 10000:
	real	0m0.117s
	user	0m0.117s
	sys	0m0.000s

./bubblesort 100000:
	real	0m11.855s
	user	0m11.853s
	sys	0m0.000s

||||||||||||||||||||||||||||||||||||||||||||| FRAGEN ||||||||||||||||||||||||||||||||||||||||||||

||Manueller Test||
Wenn ein String eingegeben wird, crashed das Java Programm, das C Programm läuft zu Ende, auch ohne Ergebnis.

||Automatisierter Test||
Wenn es richtig sortiert hat, gibt es keine Meldung aus.

||Laufzeitmessung||
1.
Nein tut sie nicht.
2.
Es kommt auf die Anzahl der auszuführenden Befehle an. Bei wenigen ist das C Programm schneller, bei sehr vielen das Java Programm.
3.
Ja das optimierte Programm ist besonders bei der Eingabe von 100000 Zahlen deutlich schneller. Mehr als doppelt so schnell.
