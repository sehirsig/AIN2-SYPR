Verbesserte Abgabe 3.0.

|||||||||||||||||||||| Normales Stringsort ||||||||||||||||||||||

sebastian@sebastian-XPS-15-9500:~/Schreibtisch/sypr-uebungen/aufgabe3$ javac Stringsort.java
sebastian@sebastian-XPS-15-9500:~/Schreibtisch/sypr-uebungen/aufgabe3$ java Stringsort 200
Unsortiertes Array:
82 74 113 173 180 141 23 81 77 192 13 190 100 82 89 39 64 75 147 16 77 35 101 136 115 23 127 47 23 6 21 199 140 25 37 183 2 9 56 113 17 163 77 53 138 22 188 31 170 141 190 196 188 56 118 186 178 101 164 21 120 116 158 29 45 120 19 101 158 129 134 199 113 142 195 66 75 127 161 189 182 113 164 110 195 59 150 67 32 14 177 98 94 169 163 108 161 10 79 156 181 128 36 165 129 189 180 145 51 49 67 38 160 2 58 170 94 32 23 128 48 60 147 11 13 97 111 79 189 147 44 119 105 27 94 152 174 68 52 53 198 0 78 116 123 68 163 133 168 107 143 3 158 45 197 59 24 104 86 138 148 191 30 3 39 94 0 109 91 176 142 114 63 96 15 4 19 179 76 35 151 63 80 154 7 133 116 7 61 25 93 112 67 34 3 27 131 141 110 174 
Sortiertes Array:
0* 10 100 101** 104 105 107 108 109 11 110* 111 112 113*** 114 115 116** 118 119 120* 123 127* 128* 129* 13* 131 133* 134 136 138* 14 140 141** 142* 143 145 147** 148 15 150 151 152 154 156 158** 16 160 161* 163** 164* 165 168 169 17 170* 173 174* 176 177 178 179 180* 181 182 183 186 188* 189** 19* 190* 191 192 195* 196 197 198 199* 2* 21* 22 23*** 24 25* 27* 29 3** 30 31 32* 34 35* 36 37 38 39* 4 44 45* 47 48 49 51 52 53* 56* 58 59* 6 60 61 63* 64 66 67** 68* 7* 74 75* 76 77** 78 79* 80 81 82* 86 89 9 91 93 94*** 96 97 98
sebastian@sebastian-XPS-15-9500:~/Schreibtisch/sypr-uebungen/aufgabe3$ make stringsort
gcc -g -W -Wall -Wvla -std=c11 -pedantic    stringsort.c   -o stringsort
sebastian@sebastian-XPS-15-9500:~/Schreibtisch/sypr-uebungen/aufgabe3$ ./stringsort 200
Unsortiertes Array:
176 150 67 197 73 129 46 138 9 83 193 174 36 70 10 141 119 94 120 11 37 156 117 182 196 90 57 196 147 189 29 123 139 48 121 12 178 167 102 139 2 48 113 191 118 76 132 189 170 4 1 7 161 118 142 109 9 199 105 156 140 87 32 80 135 153 44 65 72 147 157 27 195 22 18 65 98 102 55 21 107 8 180 20 126 122 129 87 74 186 196 14 73 28 46 161 133 91 26 5 38 135 32 185 158 2 50 56 105 57 77 164 65 58 136 144 132 17 183 6 3 179 21 29 159 19 190 92 110 168 50 100 104 82 85 62 37 88 70 94 145 148 10 163 6 146 59 138 163 42 97 166 174 70 195 85 89 137 178 0 58 28 100 162 62 138 176 51 26 46 145 123 194 155 38 152 101 97 43 16 92 92 135 18 162 82 103 51 20 81 3 78 61 56 192 76 146 168 127 124 
Sortiertes Array: 
0 1 10* 100* 101 102* 103 104 105* 107 109 11 110 113 117 118* 119 12 120 121 122 123* 124 126 127 129* 132* 133 135** 136 137 138** 139* 14 140 141 142 144 145* 146* 147* 148 150 152 153 155 156* 157 158 159 16 161* 162* 163* 164 166 167 168* 17 170 174* 176* 178* 179 18* 180 182 183 185 186 189* 19 190 191 192 193 194 195* 196** 197 199 2* 20* 21* 22 26* 27 28* 29* 3* 32* 36 37* 38* 4 42 43 44 46** 48* 5 50* 51* 55 56* 57* 58* 59 6* 61 62* 65** 67 7 70** 72 73* 74 76* 77 78 8 80 81 82* 83 85* 87* 88 89 9* 90 91 92** 94* 97* 98
sebastian@sebastian-XPS-15-9500:~/Schreibtisch/sypr-uebungen/aufgabe3$ valgrind ./stringsort 200
==5691== Memcheck, a memory error detector
==5691== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==5691== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==5691== Command: ./stringsort 200
==5691== 
Unsortiertes Array:
76 185 139 80 27 111 138 138 90 28 146 138 168 169 17 158 76 195 4 43 48 138 181 2 57 144 132 15 179 191 174 55 176 114 88 3 25 26 93 115 7 39 53 175 9 22 86 37 169 42 32 169 181 14 171 190 158 56 5 89 47 179 97 23 93 185 178 70 163 72 137 170 111 142 98 72 164 136 110 85 178 142 54 159 108 178 149 18 34 154 108 33 86 157 8 179 94 186 2 57 58 139 180 122 82 30 194 198 166 56 36 144 151 90 56 59 20 5 78 54 112 138 39 198 47 47 129 141 34 131 150 44 23 130 166 105 160 113 55 126 121 43 23 72 86 79 84 106 36 114 113 148 52 152 146 51 0 76 144 186 7 94 30 30 25 149 87 137 14 95 16 135 90 191 160 176 70 44 83 106 158 148 7 162 100 153 13 52 181 157 190 141 3 173 123 180 122 163 118 88 
Sortiertes Array: 
0 100 105 106* 108* 110 111* 112 113* 114* 115 118 121 122* 123 126 129 13 130 131 132 135 136 137* 138**** 139* 14* 141* 142* 144** 146* 148* 149* 15 150 151 152 153 154 157* 158** 159 16 160* 162 163* 164 166* 168 169** 17 170 171 173 174 175 176* 178** 179** 18 180* 181** 185* 186* 190* 191* 194 195 198* 2* 20 22 23** 25* 26 27 28 3* 30** 32 33 34* 36* 37 39* 4 42 43* 44* 47** 48 5* 51 52* 53 54* 55* 56** 57* 58 59 7** 70* 72** 76** 78 79 8 80 82 83 84 85 86** 87 88* 89 9 90** 93* 94* 95 97 98
==5691== 
==5691== HEAP SUMMARY:
==5691==     in use at exit: 0 bytes in 0 blocks
==5691==   total heap usage: 203 allocs, 203 frees, 4,225 bytes allocated
==5691== 
==5691== All heap blocks were freed -- no leaks are possible
==5691== 
==5691== For lists of detected and suppressed errors, rerun with: -s
==5691== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
sebastian@sebastian-XPS-15-9500:~/Schreibtisch/sypr-uebungen/aufgabe3$ make cppcheck
cppcheck --enable=warning,style --std=c11 stringsort.c
Checking stringsort.c ...
sebastian@sebastian-XPS-15-9500:~/Schreibtisch/sypr-uebungen/aufgabe3$ 

|||||||||||||||||||||| Stringsort Optimiert ||||||||||||||||||||||

sebastian@sebastian-XPS-15-9500:~/Schreibtisch/sypr-uebungen/aufgabe3$ ./stringsort-optimiert 200
Unsortiertes Array:
107 179 75 116 166 13 26 40 180 165 160 174 132 79 44 133 38 95 96 177 150 136 55 26 133 125 35 193 130 115 36 37 95 111 105 13 76 83 5 56 49 118 183 133 149 179 66 187 27 114 164 177 50 171 155 135 96 142 81 27 57 117 16 104 180 74 118 8 157 123 65 6 41 0 91 142 179 109 129 6 23 46 183 25 169 90 161 66 32 42 45 90 111 13 194 43 87 64 51 45 188 68 3 181 68 47 76 48 156 5 54 132 3 190 157 173 80 70 191 113 64 188 155 175 1 101 170 89 166 22 86 106 90 41 39 159 88 115 159 45 121 13 177 76 3 86 49 36 157 192 149 173 180 56 149 182 157 119 23 123 93 61 29 136 102 69 95 143 184 6 188 57 171 117 86 175 155 135 11 64 128 112 38 60 168 187 42 125 58 17 1 152 78 30 40 133 51 135 76 188 
Sortiertes Array: 
0 1* 101 102 104 105 106 107 109 11 111* 112 113 114 115* 116 117* 118* 119 121 123* 125* 128 129 13*** 130 132* 133*** 135** 136* 142* 143 149** 150 152 155** 156 157*** 159* 16 160 161 164 165 166* 168 169 17 170 171* 173* 174 175* 177** 179** 180** 181 182 183* 184 187* 188*** 190 191 192 193 194 22 23* 25 26* 27* 29 3** 30 32 35 36* 37 38* 39 40* 41* 42* 43 44 45** 46 47 48 49* 5* 50 51* 54 55 56* 57* 58 6** 60 61 64** 65 66* 68* 69 70 74 75 76*** 78 79 8 80 81 83 86** 87 88 89 90** 91 93 95** 96*
sebastian@sebastian-XPS-15-9500:~/Schreibtisch/sypr-uebungen/aufgabe3$ valgrind ./stringsort-optimiert 200
==4627== Memcheck, a memory error detector
==4627== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==4627== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==4627== Command: ./stringsort-optimiert 200
==4627== 
Unsortiertes Array:
84 191 75 123 62 141 76 107 195 162 172 48 103 25 90 172 102 122 72 73 45 140 140 193 189 166 161 154 63 16 19 100 7 46 23 22 187 99 129 134 13 53 183 116 78 25 40 181 147 65 6 193 5 146 138 194 112 99 101 175 67 120 75 75 167 50 97 106 101 178 193 114 183 176 182 14 1 23 147 101 88 153 94 45 99 32 192 11 83 93 138 151 13 166 178 132 16 27 191 70 5 184 184 140 160 167 154 113 142 101 14 182 54 60 27 105 44 19 116 128 112 7 79 78 173 9 10 141 36 1 11 193 137 196 133 97 115 88 163 9 141 129 191 196 190 18 101 34 38 170 162 102 177 193 180 102 2 143 43 190 96 7 183 34 155 117 83 70 157 46 79 98 176 70 46 118 40 100 152 30 70 67 133 199 60 65 101 15 8 96 5 57 103 141 91 58 58 126 80 167 
Sortiertes Array: 
1* 10 100* 101***** 102** 103* 105 106 107 11* 112* 113 114 115 116* 117 118 120 122 123 126 128 129* 13* 132 133* 134 137 138* 14* 140** 141*** 142 143 146 147* 15 151 152 153 154* 155 157 16* 160 161 162* 163 166* 167** 170 172* 173 175 176* 177 178* 18 180 181 182* 183** 184* 187 189 19* 190* 191** 192 193**** 194 195 196* 199 2 22 23* 25* 27* 30 32 34* 36 38 40* 43 44 45* 46** 48 5** 50 53 54 57 58* 6 60* 62 63 65* 67* 7** 70*** 72 73 75** 76 78* 79* 8 80 83* 84 88* 9* 90 91 93 94 96* 97* 98 99**
==4627== 
==4627== HEAP SUMMARY:
==4627==     in use at exit: 0 bytes in 0 blocks
==4627==   total heap usage: 4 allocs, 4 frees, 2,629 bytes allocated
==4627== 
==4627== All heap blocks were freed -- no leaks are possible
==4627== 
==4627== For lists of detected and suppressed errors, rerun with: -s
==4627== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
sebastian@sebastian-XPS-15-9500:~/Schreibtisch/sypr-uebungen/aufgabe3$ 


|||||||||||||||||||||| Benchmarks ||||||||||||||||||||||

sebastian@sebastian-XPS-15-9500:~/Schreibtisch/sypr-uebungen/aufgabe3$ time ./stringsort 20000 > /dev/null

real	0m2.488s
user	0m2.488s
sys	0m0.000s

sebastian@sebastian-XPS-15-9500:~/Schreibtisch/sypr-uebungen/aufgabe3$ time ./stringsort-optimiert 20000 > /dev/null

real	0m4.078s
user	0m4.078s
sys	0m0.000s

|||||||||||||||||||||| Fragen ||||||||||||||||||||||
>Einleitung
Weil das die mindestl채nge des Strings ist. Das Stringende Zeichen wird automatisch hinzugef체gt, muss aber immer bei der L채nge mitgerechnet werden. Es kann nicht einfach der n채chste String danach kommen, ohne dass ein "\0" dazwischen ist.

>Benchmarks
Nein, das speicher-optimierte Programm ist nicht schneller, als das nicht optimierte!
